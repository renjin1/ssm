<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
          https://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    声明数据源，连接数据库-->
    <context:property-placeholder location="classpath:config/jdbc.properties"/>
    <bean id="DataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>

    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="DataSource"/>
        <property name="configLocation" value="classpath:config/mybatis.xml"/>
<!--        指定mybatis mapper文件的位置-->
<!--        <property name="mapperLocations" value="classpath:"/>-->
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sessionFactory"/>
        <property name="basePackage" value="com.renjin.dao"/>
    </bean>

<!--    <context:component-scan base-package="com.renjin.service"/>-->
    <context:component-scan base-package="com.renjin">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
<!--配置可以批量操作的SqlSession-->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>
    <!-- ===============事务控制的配置 ================-->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        &lt;!&ndash;控制住数据源  &ndash;&gt;-->
<!--        <property name="dataSource" ref="pooledDataSource"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash;开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）  &ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash; 切入点表达式 &ndash;&gt;-->
<!--        <aop:pointcut expression="execution(* com.renjin.service..*(..))" id="txPoint"/>-->
<!--        &lt;!&ndash; 配置事务增强 &ndash;&gt;-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>-->
<!--    </aop:config>-->

<!--    &lt;!&ndash;配置事务增强，事务如何切入  &ndash;&gt;-->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash; 所有方法都是事务方法 &ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--            &lt;!&ndash;以get开始的所有方法  &ndash;&gt;-->
<!--            <tx:method name="get*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->


<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="dataSource"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash;    声明事务它的事务属性（隔离级别，传播行为，超时时间）-->
<!--        id自定义名称，表示<tx:advice>和</tx:advice>之间的配置内容的-->
<!--&ndash;&gt;-->
<!--    <tx:advice id="myAdvice" transaction-manager="transactionManager">-->
<!--        &lt;!&ndash;        配置事务属性&ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;            要给具体的方法配置事务属性，method可以有多个给不同的方法设置事务属性-->
<!--                        name方法名称1）完整的方法名称，不带有包和类-->
<!--                        2）方法可以使用通配符，*表示任意字符-->
<!--            &ndash;&gt;-->
<!--&lt;!&ndash;            <tx:method name="buy" propagation="REQUIRED" isolation="DEFAULT"&ndash;&gt;-->
<!--&lt;!&ndash;                       rollback-for="java.lang.NullPointerException,com.renjin.excp.NotEnoughException"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            使用通配符，指定很多的方法&ndash;&gt;-->
<!--            &lt;!&ndash;            <tx:method name="add*"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <tx:method name="modify*"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            <tx:method name="remove*"/>&ndash;&gt;-->
<!--            &lt;!&ndash;            查询方法&ndash;&gt;-->
<!--            &lt;!&ndash;            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>&ndash;&gt;-->
<!--            <tx:method name="*"/>-->
<!--            <tx:method name="get*" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    &lt;!&ndash;    配置aop&ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;        配置切入点表达式，指定包中的哪些类使用事务-->
<!--               id切入点表达式的名称，唯一值-->
<!--               expression:切入点表达式，指定哪些类使用事务，aspectJ会创建代理的对象-->
<!--        &ndash;&gt;-->
<!--        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>-->
<!--        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicePt"/>-->
<!--    </aop:config>-->
</beans>